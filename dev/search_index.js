var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ColBERT","category":"page"},{"location":"#ColBERT","page":"Home","title":"ColBERT","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ColBERT.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ColBERT]","category":"page"},{"location":"#ColBERT._sort_by_length-Tuple{AbstractMatrix, AbstractMatrix, Int64}","page":"Home","title":"ColBERT._sort_by_length","text":"_sort_by_length(ids::AbstractMatrix, mask::AbstractMatrix, bsize::Int)\n\nSort sentences by number of attended tokens, if the number of sentences is larger than bsize. If the number of passages (first dimension of ids) is atmost than bsize, the ids, mask, and a list Vector(1:size(ids)[1]) is returned as a three-tuple. Otherwise, the passages are first sorted by the number of attended tokens (figured out from mask), and then the the sorted arrays ids and mask are returned, along with a reversed list of indices, i.e a mapping from passages to their indice in the sorted list.\n\n\n\n\n\n","category":"method"},{"location":"#ColBERT._split_into_batches-Tuple{AbstractArray, AbstractMatrix, Int64}","page":"Home","title":"ColBERT._split_into_batches","text":"_split_into_batches(integer_ids::AbstractArray, integer_mask::AbstractMatrix, bsize::Int)::Vector{Tuple{AbstractArray, AbstractMatrix, Int}}\n\nSplit the given integer_ids and integer_mask into batches of size bsize.\n\n\n\n\n\n","category":"method"}]
}
